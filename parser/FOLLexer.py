# Generated from java-escape by ANTLR 4.5
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2(")
        buf.write("\u00d5\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13")
        buf.write("\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3")
        buf.write("$\3$\7$\u00bb\n$\f$\16$\u00be\13$\3%\3%\7%\u00c2\n%\f")
        buf.write("%\16%\u00c5\13%\3&\5&\u00c8\n&\3&\6&\u00cb\n&\r&\16&\u00cc")
        buf.write("\3\'\6\'\u00d0\n\'\r\'\16\'\u00d1\3\'\3\'\2\2(\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(\3\2\b\3\2")
        buf.write("c|\5\2C\\aac|\3\2C\\\3\2C|\3\2\62;\5\2\13\f\17\17\"\"")
        buf.write("\u00d9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2")
        buf.write("\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2")
        buf.write("\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33")
        buf.write("\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2")
        buf.write("\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2")
        buf.write("\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2")
        buf.write("\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2")
        buf.write("\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3")
        buf.write("\2\2\2\2K\3\2\2\2\2M\3\2\2\2\3O\3\2\2\2\5Q\3\2\2\2\7S")
        buf.write("\3\2\2\2\tU\3\2\2\2\13Z\3\2\2\2\r_\3\2\2\2\17e\3\2\2\2")
        buf.write("\21k\3\2\2\2\23o\3\2\2\2\25s\3\2\2\2\27u\3\2\2\2\31w\3")
        buf.write("\2\2\2\33y\3\2\2\2\35\u0080\3\2\2\2\37\u0082\3\2\2\2!")
        buf.write("\u0089\3\2\2\2#\u008b\3\2\2\2%\u008e\3\2\2\2\'\u0090\3")
        buf.write("\2\2\2)\u0094\3\2\2\2+\u0096\3\2\2\2-\u009a\3\2\2\2/\u009c")
        buf.write("\3\2\2\2\61\u009f\3\2\2\2\63\u00a1\3\2\2\2\65\u00a3\3")
        buf.write("\2\2\2\67\u00a6\3\2\2\29\u00a9\3\2\2\2;\u00ab\3\2\2\2")
        buf.write("=\u00ae\3\2\2\2?\u00b0\3\2\2\2A\u00b2\3\2\2\2C\u00b4\3")
        buf.write("\2\2\2E\u00b6\3\2\2\2G\u00b8\3\2\2\2I\u00bf\3\2\2\2K\u00c7")
        buf.write("\3\2\2\2M\u00cf\3\2\2\2OP\7.\2\2P\4\3\2\2\2QR\7*\2\2R")
        buf.write("\6\3\2\2\2ST\7+\2\2T\b\3\2\2\2UV\7v\2\2VW\7t\2\2WX\7w")
        buf.write("\2\2XY\7g\2\2Y\n\3\2\2\2Z[\7V\2\2[\\\7t\2\2\\]\7w\2\2")
        buf.write("]^\7g\2\2^\f\3\2\2\2_`\7h\2\2`a\7c\2\2ab\7n\2\2bc\7u\2")
        buf.write("\2cd\7g\2\2d\16\3\2\2\2ef\7H\2\2fg\7c\2\2gh\7n\2\2hi\7")
        buf.write("u\2\2ij\7g\2\2j\20\3\2\2\2kl\7p\2\2lm\7q\2\2mn\7v\2\2")
        buf.write("n\22\3\2\2\2op\7p\2\2pq\7g\2\2qr\7i\2\2r\24\3\2\2\2st")
        buf.write("\7\u0080\2\2t\26\3\2\2\2uv\7\u00ae\2\2v\30\3\2\2\2wx\7")
        buf.write("\u2205\2\2x\32\3\2\2\2yz\7g\2\2z{\7z\2\2{|\7k\2\2|}\7")
        buf.write("u\2\2}~\7v\2\2~\177\7u\2\2\177\34\3\2\2\2\u0080\u0081")
        buf.write("\7\u2202\2\2\u0081\36\3\2\2\2\u0082\u0083\7h\2\2\u0083")
        buf.write("\u0084\7q\2\2\u0084\u0085\7t\2\2\u0085\u0086\7c\2\2\u0086")
        buf.write("\u0087\7n\2\2\u0087\u0088\7n\2\2\u0088 \3\2\2\2\u0089")
        buf.write("\u008a\7\u2194\2\2\u008a\"\3\2\2\2\u008b\u008c\7/\2\2")
        buf.write("\u008c\u008d\7@\2\2\u008d$\3\2\2\2\u008e\u008f\7\u2196")
        buf.write("\2\2\u008f&\3\2\2\2\u0090\u0091\7>\2\2\u0091\u0092\7/")
        buf.write("\2\2\u0092\u0093\7@\2\2\u0093(\3\2\2\2\u0094\u0095\7\u2229")
        buf.write("\2\2\u0095*\3\2\2\2\u0096\u0097\7c\2\2\u0097\u0098\7p")
        buf.write("\2\2\u0098\u0099\7f\2\2\u0099,\3\2\2\2\u009a\u009b\7\u222a")
        buf.write("\2\2\u009b.\3\2\2\2\u009c\u009d\7q\2\2\u009d\u009e\7t")
        buf.write("\2\2\u009e\60\3\2\2\2\u009f\u00a0\7>\2\2\u00a0\62\3\2")
        buf.write("\2\2\u00a1\u00a2\7@\2\2\u00a2\64\3\2\2\2\u00a3\u00a4\7")
        buf.write("@\2\2\u00a4\u00a5\7?\2\2\u00a5\66\3\2\2\2\u00a6\u00a7")
        buf.write("\7>\2\2\u00a7\u00a8\7?\2\2\u00a88\3\2\2\2\u00a9\u00aa")
        buf.write("\7?\2\2\u00aa:\3\2\2\2\u00ab\u00ac\7#\2\2\u00ac\u00ad")
        buf.write("\7?\2\2\u00ad<\3\2\2\2\u00ae\u00af\7-\2\2\u00af>\3\2\2")
        buf.write("\2\u00b0\u00b1\7/\2\2\u00b1@\3\2\2\2\u00b2\u00b3\7,\2")
        buf.write("\2\u00b3B\3\2\2\2\u00b4\u00b5\7\61\2\2\u00b5D\3\2\2\2")
        buf.write("\u00b6\u00b7\7\'\2\2\u00b7F\3\2\2\2\u00b8\u00bc\t\2\2")
        buf.write("\2\u00b9\u00bb\t\3\2\2\u00ba\u00b9\3\2\2\2\u00bb\u00be")
        buf.write("\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd")
        buf.write("H\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c3\t\4\2\2\u00c0")
        buf.write("\u00c2\t\5\2\2\u00c1\u00c0\3\2\2\2\u00c2\u00c5\3\2\2\2")
        buf.write("\u00c3\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4J\3\2\2")
        buf.write("\2\u00c5\u00c3\3\2\2\2\u00c6\u00c8\7/\2\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9")
        buf.write("\u00cb\t\6\2\2\u00ca\u00c9\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cdL\3\2\2")
        buf.write("\2\u00ce\u00d0\t\7\2\2\u00cf\u00ce\3\2\2\2\u00d0\u00d1")
        buf.write("\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d4\b\'\2\2\u00d4N\3\2\2\2\b\2")
        buf.write("\u00bc\u00c3\u00c7\u00cc\u00d1\3\b\2\2")
        return buf.getvalue()


class FOLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    LT = 24
    GT = 25
    GE = 26
    LE = 27
    EQ = 28
    NE = 29
    ADD = 30
    SUB = 31
    MUL = 32
    DIV = 33
    MOD = 34
    ID = 35
    PRED = 36
    INT = 37
    WD = 38

    modeNames = [ u"DEFAULT_MODE" ]

    literalNames = [ u"<INVALID>",
            "','", "'('", "')'", "'true'", "'True'", "'false'", "'False'", 
            "'not'", "'neg'", "'~'", "'¬'", "'∃'", "'exists'", "'∀'", "'forall'", 
            "'→'", "'->'", "'↔'", "'<->'", "'∧'", "'and'", "'∨'", "'or'", 
            "'<'", "'>'", "'>='", "'<='", "'='", "'!='", "'+'", "'-'", "'*'", 
            "'/'", "'%'" ]

    symbolicNames = [ u"<INVALID>",
            "LT", "GT", "GE", "LE", "EQ", "NE", "ADD", "SUB", "MUL", "DIV", 
            "MOD", "ID", "PRED", "INT", "WD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "LT", "GT", "GE", "LE", "EQ", 
                  "NE", "ADD", "SUB", "MUL", "DIV", "MOD", "ID", "PRED", 
                  "INT", "WD" ]

    grammarFileName = "FOL.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


